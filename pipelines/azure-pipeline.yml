trigger:
  branches:
    include:
      - master
      - dev

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
  - template: src/variables/global-variables.yml@templates
  - template: src/resources/autocutoff/autocutoff-variables.yml@templates
  - name: 'repositoryName'
    value: 'autocutoff/autocutoff-function'

stages:
# Build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
  dependsOn: ''
  variables:
    envName: 'build'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-func-${{ variables.envName }}'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.AutoCutoffFunction/Dockerfile'

  jobs:
  # Docker Build
  - template: /src/resources/autocutoff/jobs/dockerbuild.yml@templates
    parameters:
      deploymentName: 'docker_build'
      dependsOn: ''
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: build
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  # Docker Build and Push
  - template: /src/resources/autocutoff/jobs/dockerbuild.yml@templates
    parameters:
      deploymentName: 'docker_build_and_push'
      dependsOn: ''
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: buildAndPush
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

# Deploy Stage TEST
- stage: test
  displayName: 'Test'
  dependsOn: 'build'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'test'
    envLabel: 'non-prod'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-func-${{ variables.envName }}'
    rgName: '${{ variables.envRgName }}'

  jobs:
  - template: /src/resources/autocutoff/jobs/deploy-function.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'deploy_function'
      serviceConnection: ${{ variables.serviceConnection }}
      envGroup: '${{ variables.envGroupName }}'
      envName: '${{ variables.envName }}'
      containerRegistry: '${{ variables.containerRegistry }}'
      functionApp: '${{ variables.appName }}'
      kvName: '${{ variables.kvName }}'
      rgName: '${{ variables.rgName }}'
      repository: '${{ variables.repositoryName }}'

# Deploy Stage PROD
- stage: prod
  displayName: 'Prod'
  dependsOn: 'test'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'prod'
    envLabel: 'prod'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-func-${{ variables.envName }}'
    rgName: '${{ variables.envRgName }}'

  jobs:
  - template: /src/resources/autocutoff/jobs/deploy-function.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'deploy_function'
      serviceConnection: ${{ variables.serviceConnection }}
      envGroup: '${{ variables.envGroupName }}'
      envName: '${{ variables.envName }}'
      containerRegistry: '${{ variables.containerRegistry }}'
      functionApp: '${{ variables.appName }}'
      kvName: '${{ variables.kvName }}'
      rgName: '${{ variables.rgName }}'
      repository: '${{ variables.repositoryName }}'