trigger:
  branches:
    include:
      - master
      - dev

resources:
   repositories:
   - repository: self
   - repository: templates
     type: github
     name: equinor/procosys-infra
     endpoint: 'equinor'
     ref: 91484_autocutoff_infrastructure

# Global variables for the pipeline
variables:
  - template: src/variables/global-variables.yml@templates
  - template: src/resources/autocutoff/autocutoff-variables.yml@templates
  - name: 'repositoryName'
    value: 'autocutoff/autocutoff-function'
  - name: 'buildConfiguration'
    value: 'Release' 
  - name: 'vmImageName'
    value: 'ubuntu-latest'

stages:
 - stage: "CI"
   displayName: 'Build and Test'
   jobs:
   - job:
     pool:
       vmImage: $(vmImageName)

     steps:
     - task: NuGetToolInstaller@1

     - task: NuGetCommand@2
       inputs:
         command: 'restore'
         feedsToUse: 'config'
         nugetConfigPath: 'nuget.config'

     - script: dotnet build --configuration $(buildConfiguration)
       displayName: 'dotnet build $(buildConfiguration)'
    
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test $(buildConfiguration)'
       inputs:
         command: test
         projects: '**/*[Tt]ests/*.csproj'
         arguments: '--configuration $(buildConfiguration)'

 # common stage. Docker build, tag and push
 - stage: common
   displayName: 'Common'
   dependsOn: 'CI'
   condition:  |
     and
     (
       succeeded(),
       or
       ( 
         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
         eq(variables['Build.SourceBranch'], 'refs/heads/dev')
       )
     )
   variables:
     envName: 'common'
     envRg: '${{ variables.envRgName }}'
     containerRegistry: '${{ variables.containerRegistryName }}'
     envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
     dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
     dockerfilePath: '$(Build.SourcesDirectory)/Equinor.ProCoSys.AutoCutoffFunction/Dockerfile'

   jobs:
   - template: /src/resources/autocutoff/jobs/dockerbuild.yml@templates
     parameters:
       deploymentName: 'docker_build_push'
       env: 'pcs-${{ variables.envName }}'
#       nugetConfigPath: 'nuget.config'
       envGroup: '${{ variables.envGroupName }}'
       dockerfilePath: ${{ variables.dockerfilePath }}
       buildContext: '$(Build.SourcesDirectory)'
       repository: ${{ variables.repositoryName }}
       dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

 - stage: test
   displayName: 'test'
   dependsOn: 'common'
   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
   variables:
    envName: 'test'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    envRg: 'pcs-autocutoff-non-prod-rg'

   jobs:
   - template: /src/resources/autocutoff/jobs/deploy-function.yml@templates
     parameters:
      dependsOn: ''
      deploymentName: 'publish'
      serviceConnection: ${{ variables.serviceConnection }}
      functionApp: '$(globalPrefix)-$(fullAppName)-test-func'
      envGroup: '${{ variables.envGroupName }}'
      rgName: '${{ variables.envRg }}'
      env: '${{ variables.envName }}'
      repository: ${{ variables.repositoryName }}
      containerRegistry: '${{ variables.containerRegistry }}'
      keyVaultUrl: 'pcs-aco-non-prod-kv'

 - stage: prod
   displayName: 'prod'
   dependsOn: 'common'
   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
   variables:
    envName: 'prod'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    envRg: 'pcs-autocutoff-prod-rg'
  
   jobs:
   - template: /src/resources/autocutoff/jobs/deploy-function.yml@templates
     parameters:
      dependsOn: ''
      deploymentName: 'publish'
      serviceConnection: ${{ variables.serviceConnection }}
      functionApp: '$(globalPrefix)-$(fullAppName)-prod-func'
      envGroup: '${{ variables.envGroupName }}'
      rgName: '${{ variables.envRg }}'
      env: '${{ variables.envName }}'
      repository: ${{ variables.repositoryName }}
      containerRegistry: '${{ variables.containerRegistry }}'
      keyVaultUrl: 'pcs-aco-prod-kv'